'''
冒泡算法：
比较相邻的元素。如果第一个比第二个大，就交换他们两个。
对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。
针对所有的元素重复以上的步骤，除了最后一个。
持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。
可以利用冒泡算法的案例：
输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，
所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。
遇到偶数在前奇数在后的情况交换两者的位置。
选择算法：
每次讲min置成无序组起始位置元素下标
例遍无序组找到最小的
如果最小元素不是无序组起始位置元素，则与起始元素交换位置
插入算法：
插入排序原理很简单，讲一组数据分成两组，我分别将其称为有序组与待插入组。
每次从待插入组中取出一个元素，与有序组的元素进行比较，并找到合适的位置，将该元素插到有序组当中。
就这样，每次插入一个元素，有序组增加，待插入组减少。直到待插入组元素个数为0。
当然，插入过程中涉及到了元素的移动。
快速排序：
基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，
然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。
一趟快速排序的算法是：
1）设置两个变量i、j，排序开始的时候：i=0，j=N-1；
2）以第一个数组元素作为关键数据，赋值给key，即key=A[0]；
3）从j开始向前搜索，即由后开始向前搜索(j--)，找到第一个小于key的值A[j]，将A[j]和A[i]互换；
4）从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于key的A[i]，将A[i]和A[j]互换；
5）重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于key,4中A[i]不大于key的时候改变j、i的值，
使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。
另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。
'''
#coding:utf-8
def bubble(num,n):
    for i in range(n):
        for j in range(n-i-1):
            if num[j]>num[j+1]:
                tmp=num[j]
                num[j]=num[j+1]
                num[j+1]=tmp
    return (num)
def selectsort(num,n):
    for i in range(n):
        min=i
        for j in range(i,n):
            if num[j]<num[min]:
                min=j
        if min!=i:
            tmp=num[i]
            num[i]=num[min]
            num[min]=tmp
    return (num)
def insertsort(num,n):
    for i in range(1,n):
        tmp=num[i]
        j=i-1
        while j>0 and tmp<num[j]:
            num[j+1]=num[j]
            j -=1
        num[j+1]=tmp
    return (num)   
def quicksort(L, low, high):
    i = low 
    j = high
    if i >= j:
        return L
    key = L[i]
    while i < j:
        while i < j and L[j] >= key:
            j = j-1                                                             
        L[i] = L[j]
        while i < j and L[i] <= key:    
            i = i+1 
        L[j] = L[i]
    L[i] = key 
    quicksort(L, low, i-1)
    quicksort(L, j+1, high)
def main():
    num=[9,8,7,6,5,4,3,2,1,0]
    print(bubble(num,10))
    print(selectsort(num,10))
    print(insertsort(num,10))
main()
    
