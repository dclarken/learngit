#coding:utf-8
'''
某餐馆有n张桌子，每张桌子有一个参数：
a 可容纳的最大人数； 有m批客人，
每批客人有两个参数:b人数，c预计消费金额。
 在不允许拼桌的情况下，
请实现一个算法选择其中一部分客人，使得总预计消费金额最大

基本思路就是：桌子序列升序排列  ，客人按照预定花钱多少降序排序，
然后贪心法从钱多的客人开始招呼。
在遍历能容得下第i批客人的时候需要二分查找去找否则超时。
输入：
3 5 
2 4 2 
1 3 
3 5 
3 7 
5 9 
1 10
输出：
20
'''
def main():
    n,m=[int(i) for i in raw_input().split()]
    a=[int(i) for i in raw_input().split()]
    guest=[]
    for i in range(m):
        guest.append([int(i) for i in raw_input().split()])
    print(func(n,m,a,guest))

def func(n,m,a,guest):
    a.sort()
    value = 0
    count = 0
    guest.sort(key=lambda x:x[1], reverse=True)
    i = 0
    j = 0
    while i < m:
        index=search(a,guest[i][0])
        if index>0:
            j = j+1
            value +=guest[i][1]
            del a[index]
            if j == n:
                break
        i=i+1
    return value
def search(nums,target):
    if target<=nums[0]:
        return 0
    if target>nums[-1]:
        return -1
    l=0
    r=len(nums)-1
    while (l+1)!=r:
        mid=(l+r)/2
        if target<=nums[mid]:
            r=mid
        else:
            l=mid
    return r
main()
